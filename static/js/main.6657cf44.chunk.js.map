{"version":3,"sources":["component/EditConnectionDialog/AddConnections/AddConnections.module.css","component/ConfirmationDialog.tsx","util/ItemConnection.tsx","component/EditConnectionDialog/ConnectionTable/ConnectionTableHeader.tsx","component/EditConnectionDialog/ConnectionTable/ConnectionTableToolbar.tsx","component/EditConnectionDialog/ConnectionTable/ConnectionTable.tsx","component/EditConnectionDialog/RemoveConnections/RemoveConnections.tsx","component/EditConnectionDialog/AddConnections/AddConnections.tsx","component/EditConnectionDialog/NotificationBar.tsx","component/EditConnectionDialog/EditConnectionsDialog.tsx","component/NodeRenderer/CustomEdge.tsx","component/NodeRenderer/Layout-Flow.tsx","component/NodeRenderer/NodeRenderer.tsx","component/ZoomInput.tsx","component/DrawerMenu/SettingsDialog.tsx","component/DrawerMenu/DrawerMenu.tsx","App.tsx","util/stickyState.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","ConfirmationDialog","onCancel","open","onOk","text","Dialog","DialogContent","DialogContentText","DialogActions","Button","onClick","getId","connection","algo","crypto","createHash","update","source","target","digest","ConnectionTableHeader","onSelectAllClick","selectedCount","rowCount","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","useToolbarStyles","makeStyles","theme","createStyles","root","paddingLeft","spacing","paddingRight","highlight","palette","type","color","secondary","main","backgroundColor","lighten","light","primary","dark","title","flex","ConnectionTableToolbar","numSelected","onDelete","classes","Toolbar","className","clsx","Typography","variant","component","id","Tooltip","IconButton","aria-label","ConnectionTable","connections","selectedIds","onSelectAll","onSelect","React","useState","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","min","length","Paper","elevation","TableContainer","Table","TableBody","sort","a","b","localeCompare","slice","map","includes","style","height","colSpan","TablePagination","rowsPerPageOptions","count","onPageChange","event","newPage","onRowsPerPageChange","parseInt","value","RemoveConnections","setSelectedIds","showConfirmation","setShowConfirmation","filter","index","indexOf","AddConnections","onSubmit","itemIds","requestNotification","setSource","setTarget","sourceError","setSourceError","dialogContent","Autocomplete","autoCorrect","e","undefined","renderInput","params","TextField","error","helperText","label","options","arrow","hasError","find","severity","disabled","NotificationBar","onClose","Snackbar","anchorOrigin","horizontal","vertical","autoHideDuration","Alert","EditConnectionsDialog","useTheme","fullScreen","useMediaQuery","breakpoints","down","notificationBarRequest","setNotificationBarRequest","fullWidth","scroll","request","CustomEdge","edgePath","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","arrowHeadType","markerEndId","console","log","firstCorner","x","y","secondCorner","getBezierPath","Position","Top","getSmoothStepPath","markerEnd","getMarkerEnd","d","nodeExtent","LayoutFlow","elements","setOnFocusIdHandler","store","useStore","zoomPanHelper","useZoomPanHelper","useEffect","onFocusId","node","getState","nodes","__rf","position","width","setCenter","edgeTypes","custom","elementsSelectable","nodesDraggable","nodesConnectable","onLoad","instance","fitView","showInteractive","dagreGraph","dagre","graphlib","Graph","setDefaultEdgeLabel","NodeRenderer","sources","targets","layoutedElements","setLayoutedElements","useDeepCompareEffect","Array","from","Set","name","data","edges","ArrowHeadType","ArrowClosed","setGraph","rankdir","forEach","el","isNode","setNode","setEdge","layout","nodeWithPosition","Left","Right","random","ZoomInput","setId","SettingsDialog","DrawerMenu","settingOpen","setSettingsOpen","List","ListItem","ListItemText","App","defaultValue","key","stickyValue","window","localStorage","getItem","JSON","parse","setValue","setItem","stringify","useStickyState","setConnections","drawerOpen","setDrawerOpen","showEditDialog","setShowEditDialog","onFocusIdHandler","ids","Object","values","items","item","displayName","nodeNames","AppBar","edge","noWrap","Drawer","newConnections","push","itemsToDelete","Fab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6657cf44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogContent\":\"AddConnections_dialogContent__27qJ7\",\"autoCorrect\":\"AddConnections_autoCorrect__36bx3\",\"arrow\":\"AddConnections_arrow__3DYuf\"};","import {Button, Dialog, DialogActions, DialogContent, DialogContentText} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface ConfirmationDialogProps {\n  text: string\n  open: boolean\n  onOk: () => void\n  onCancel: () => void\n}\n\nconst ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({onCancel, open, onOk, text}) => {\n  return (\n    <Dialog open={open}>\n      <DialogContent>\n        <DialogContentText>{text}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onCancel}>Cancel</Button>\n        <Button onClick={onOk}>Ok</Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default ConfirmationDialog","import crypto from 'crypto'\n\nexport interface ItemConnection {\n  source: string,\n  target?: string\n}\n\nexport function getId(connection: ItemConnection): string {\n  const algo = crypto.createHash('md5');\n  algo.update((`${connection.source}-${connection.target}`))\n  return algo.digest('base64')\n}","import {Checkbox, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface ConnectionTableHeaderProps {\n  selectedCount: number\n  rowCount: number\n  onSelectAllClick: () => void\n}\n\n\nconst ConnectionTableHeader: React.FC<ConnectionTableHeaderProps> = (\n  {onSelectAllClick, selectedCount, rowCount}) => {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={selectedCount > 0 && selectedCount < rowCount}\n            checked={rowCount > 0 && selectedCount === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{'aria-label': 'select all'}}\n          />\n        </TableCell>\n        <TableCell>Source</TableCell>\n        <TableCell>Target</TableCell>\n      </TableRow>\n    </TableHead>\n  )\n}\n\nexport default ConnectionTableHeader","import {createStyles, IconButton, lighten, makeStyles, Theme, Toolbar, Tooltip, Typography} from \"@material-ui/core\";\nimport clsx from 'clsx';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useToolbarStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(1),\n    },\n    highlight:\n      theme.palette.type === 'light'\n        ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n        : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n    title: {\n      flex: '1 1 100%',\n    },\n  }),\n);\n\ninterface ConnectionTableToolbarProps {\n  numSelected: number;\n  onDelete: () => void\n}\n\n\nconst ConnectionTableToolbar: React.FC<ConnectionTableToolbarProps> = ({numSelected, onDelete}) => {\n  const classes = useToolbarStyles();\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Current Connections\n        </Typography>\n      )}\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\" onClick={onDelete}>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : null}\n    </Toolbar>\n  );\n};\n\nexport default ConnectionTableToolbar","import React from \"react\";\nimport {\n  Checkbox,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow\n} from \"@material-ui/core\";\nimport ConnectionTableHeader from \"./ConnectionTableHeader\";\nimport {getId, ItemConnection} from \"../../../util/ItemConnection\";\nimport ConnectionTableToolbar from \"./ConnectionTableToolbar\";\n\ninterface ConnectionTableProps {\n  connections: ItemConnection[]\n  selectedIds: string[],\n  onSelectAll: () => void,\n  onSelect: (id: string) => void,\n  onDelete: () => void\n}\n\nconst ConnectionTable: React.FC<ConnectionTableProps> = (\n  {\n    connections,\n    selectedIds,\n    onDelete,\n    onSelectAll,\n    onSelect\n  }\n) => {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, connections.length - page * rowsPerPage);\n\n  return (\n    <Paper elevation={0}>\n      <ConnectionTableToolbar numSelected={selectedIds.length} onDelete={onDelete}/>\n      <TableContainer>\n        <Table>\n          <ConnectionTableHeader\n            selectedCount={selectedIds.length}\n            rowCount={connections.length}\n            onSelectAllClick={onSelectAll}\n          />\n          <TableBody>\n            {connections\n              .sort((a, b) => a.source.localeCompare(b.source))\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map(connection => {\n                const id = getId(connection);\n\n                return (\n                  <TableRow onClick={() => onSelect(id)}>\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={selectedIds.includes(id)}\n                      />\n                    </TableCell>\n                    <TableCell>{connection.source}</TableCell>\n                    <TableCell>{connection.target}</TableCell>\n                  </TableRow>\n                )\n              })}\n            {emptyRows > 0 && (\n              <TableRow style={{height: (53 * emptyRows)}}>\n                <TableCell colSpan={3}/>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25]}\n        component=\"div\"\n        count={connections.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  )\n}\n\nexport default ConnectionTable","import ConfirmationDialog from \"../../ConfirmationDialog\";\nimport {getId, ItemConnection} from \"../../../util/ItemConnection\";\nimport ConnectionTable from \"../ConnectionTable/ConnectionTable\";\nimport React, {useState} from \"react\";\n\nexport interface RemoveConnectionsProps {\n  connections: ItemConnection[]\n  onDelete: (itemsToDelete: ItemConnection[]) => void\n}\n\nconst RemoveConnections: React.FC<RemoveConnectionsProps> = ({connections, onDelete}) => {\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [showConfirmation, setShowConfirmation] = useState(false)\n\n  function handleSelectAll() {\n    if (selectedIds.length === connections.length) {\n      setSelectedIds([])\n    } else {\n      setSelectedIds(connections.map(getId))\n    }\n  }\n\n  function handleToggle(id: string) {\n    const index = selectedIds.indexOf(id)\n    if (index === -1) {\n      setSelectedIds([...selectedIds, id])\n    } else {\n      setSelectedIds(selectedIds.filter(value => value !== id))\n    }\n  }\n\n  return (\n    <>\n      <ConfirmationDialog\n        text={\"Do you want to delete the selected Connections?\"}\n        open={showConfirmation}\n        onOk={() => {\n          onDelete(connections.filter(value => selectedIds.includes(getId(value))))\n          setShowConfirmation(false)\n          setSelectedIds([])\n        }}\n        onCancel={() => setShowConfirmation(false)}\n      />\n      <ConnectionTable\n        connections={connections}\n        selectedIds={selectedIds}\n        onSelect={handleToggle}\n        onSelectAll={handleSelectAll}\n        onDelete={() => setShowConfirmation(true)}\n      />\n    </>\n  )\n}\n\nexport default RemoveConnections","import {Button, Paper} from \"@material-ui/core\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport React, {useState} from \"react\";\nimport classes from './AddConnections.module.css'\nimport {ItemConnection} from \"../../../util/ItemConnection\";\nimport {NotificationBarRequest} from \"../EditConnectionsDialog\";\n\nexport interface AddConnectionsProps {\n  onSubmit: (source: string, target: string) => void\n  itemIds: string[]\n  connections: ItemConnection[]\n  requestNotification: (request: NotificationBarRequest) => void\n}\n\nconst AddConnections: React.FC<AddConnectionsProps> = ({onSubmit, itemIds, connections, requestNotification}) => {\n  const [source, setSource] = useState<string>();\n  const [target, setTarget] = useState<string>();\n\n  const [sourceError, setSourceError] = useState<string>()\n\n  function handleSubmit() {\n    let hasError = false\n    if (!source) {\n      hasError = true\n      setSourceError(\"Please select a source\")\n    }\n\n    if (connections.find(connection => connection.source === source && connection.target === target)) {\n      hasError = true\n      requestNotification({severity: \"error\", text: \"This connection already exist\"})\n    }\n    if (!hasError) {\n      onSubmit(source!!, target!!)\n    }\n  }\n\n  return (\n    <Paper>\n      <div className={classes.dialogContent}>\n        <Autocomplete\n          className={classes.autoCorrect}\n          onChange={\n            (e, value) => {\n              setSource(value!!)\n              setSourceError(undefined)\n            }\n          }\n          renderInput={(params) =>\n            <TextField\n              {...params}\n              error={sourceError !== undefined}\n              helperText={sourceError}\n              label=\"Combo box\"\n              variant=\"outlined\"\n              value={source}/>\n          }\n          options={itemIds}\n        />\n        <div className={classes.arrow}>{\"=>\"}</div>\n        <Autocomplete\n          className={classes.autoCorrect}\n          onChange={\n            (e, value) => setTarget(value || undefined)\n          }\n          renderInput={(params) =>\n            <TextField\n              {...params}\n              label=\"Combo box\"\n              variant=\"outlined\"\n              value={target}\n            />\n          }\n          options={itemIds}\n        />\n      </div>\n      <Button onClick={handleSubmit} disabled={sourceError !== undefined}>Submit</Button>\n    </Paper>\n  )\n}\n\nexport default AddConnections","import {Alert, AlertProps} from \"@material-ui/lab\";\nimport {Snackbar} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface NotificationBarProps {\n  severity: AlertProps[\"severity\"]\n  onClose: () => void\n  text?: String\n}\n\nconst NotificationBar: React.FC<NotificationBarProps> = ({text, severity, onClose}) =>\n  (\n    <Snackbar\n      anchorOrigin={{horizontal: \"center\", vertical: \"top\"}}\n      open={text !== undefined}\n      autoHideDuration={6000}\n      onClose={onClose}>\n      <Alert onClose={onClose} severity={severity}>\n        {text}\n      </Alert>\n    </Snackbar>\n  )\n\nexport default NotificationBar","import {Button, Dialog, DialogActions, DialogContent, useMediaQuery, useTheme} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport RemoveConnections, {RemoveConnectionsProps} from \"./RemoveConnections/RemoveConnections\";\nimport AddConnections, {AddConnectionsProps} from \"./AddConnections/AddConnections\";\nimport {AlertProps} from \"@material-ui/lab\";\nimport NotificationBar from \"./NotificationBar\";\nimport {ItemConnection} from \"../../util/ItemConnection\";\n\n\ninterface EditConnectionsDialogProps {\n  onClose: () => void\n  open: boolean,\n  connections: ItemConnection[],\n  onSubmit: AddConnectionsProps[\"onSubmit\"],\n  itemIds: AddConnectionsProps[\"itemIds\"],\n  onDelete: RemoveConnectionsProps[\"onDelete\"]\n}\n\nexport interface NotificationBarRequest {\n  text: string,\n  severity: AlertProps[\"severity\"]\n}\n\nconst EditConnectionsDialog: React.FC<EditConnectionsDialogProps> = (\n  {onDelete, onClose, connections, open, onSubmit, itemIds}\n) => {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [notificationBarRequest, setNotificationBarRequest] = useState<NotificationBarRequest | undefined>(undefined)\n\n  const requestNotificationBar = (request: NotificationBarRequest) => setNotificationBarRequest(request)\n\n  const handleSubmit = (source: string, target: string) => {\n    setNotificationBarRequest({severity: \"success\", text: `Connection ${source}=>${target} added`})\n    onSubmit(source, target)\n  }\n\n  return (\n    <Dialog open={open} fullWidth fullScreen={fullScreen} scroll=\"paper\">\n      <NotificationBar\n        onClose={() => setNotificationBarRequest(undefined)}\n        severity={notificationBarRequest?.severity || \"info\"}\n        text={notificationBarRequest?.text}\n      />\n      <DialogContent>\n        <AddConnections onSubmit={handleSubmit} itemIds={itemIds} connections={connections}\n                        requestNotification={requestNotificationBar}/>\n        <RemoveConnections connections={connections} onDelete={onDelete}/>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default EditConnectionsDialog","import React from \"react\"\nimport {EdgeProps, getBezierPath, getMarkerEnd, getSmoothStepPath, Position} from \"react-flow-renderer\";\n\nconst CustomEdge: React.FC<EdgeProps> = (\n  {\n    id,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    style = {},\n    arrowHeadType,\n    markerEndId,\n  }\n) => {\n  let edgePath;\n  console.log(`${sourceX} > ${targetX} : ${sourceX > targetX}`)\n  if (targetX < sourceX) {\n    const firstCorner = {x: sourceX + 10, y: targetY + 20}\n    const secondCorner = {x: targetX - 10, y: targetY + 20}\n\n    edgePath = getBezierPath({\n      sourceX,\n      sourceY,\n      sourcePosition,\n      targetX: firstCorner.x,\n      targetY: firstCorner.y,\n      targetPosition: Position.Top\n    })\n    edgePath += getSmoothStepPath({\n      sourceX: firstCorner.x,\n      sourceY: firstCorner.y,\n      sourcePosition,\n      targetX: secondCorner.x,\n      targetY: secondCorner.y,\n      targetPosition\n    })\n    edgePath += getBezierPath({\n      sourceX: secondCorner.x,\n      sourceY: secondCorner.y,\n      sourcePosition: Position.Top,\n      targetX,\n      targetY,\n      targetPosition\n    })\n  } else {\n    edgePath = getSmoothStepPath({sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition})\n  }\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n\n  return (\n    <>\n      <path id={id} style={style} className=\"react-flow__edge-path\" d={edgePath} markerEnd={markerEnd}/>\n    </>\n  );\n}\n\nexport default CustomEdge","import React, {useEffect} from 'react';\nimport ReactFlow, {Controls, Elements, NodeExtent, useStore, useZoomPanHelper,} from 'react-flow-renderer';\n\nimport '../layouting.css';\nimport CustomEdge from \"./CustomEdge\";\n\nexport interface LayoutFlowProps {\n  elements: Elements,\n  setOnFocusIdHandler: (handler: (id: string) => void) => void\n}\n\nconst nodeExtent: NodeExtent = [\n  [0, 0],\n  [10000, 10000],\n];\n\nconst LayoutFlow: React.FC<LayoutFlowProps> = ({elements, setOnFocusIdHandler}) => {\n\n  const store = useStore()\n  const zoomPanHelper = useZoomPanHelper()\n\n  useEffect(() => {\n    function onFocusId(id: string) {\n      const node = store.getState().nodes.find(value => value.id === id)\n      if (node) {\n        const x = node.__rf.position.x + node.__rf.width / 2;\n        const y = node.__rf.position.y + node.__rf.height / 2;\n        const zoom = 1.85;\n        zoomPanHelper.setCenter(x, y, zoom)\n      }\n    }\n\n    console.log(\"effect\")\n    setOnFocusIdHandler(() => onFocusId)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [store, zoomPanHelper])\n\n  return (\n    <>\n      <div className=\"layoutflow\">\n        <ReactFlow\n          className=\"flow\"\n          elements={elements}\n          edgeTypes={{custom: CustomEdge}}\n          nodeExtent={nodeExtent}\n          elementsSelectable={false}\n          nodesDraggable={false}\n          nodesConnectable={false}\n          onLoad={instance => instance.fitView({padding: 0.25})}\n        >\n          <Controls showInteractive={false}/>\n        </ReactFlow>\n      </div>\n    </>\n  );\n};\n\nexport default LayoutFlow;","import {ArrowHeadType, Edge, Elements, isNode, Node, Position, ReactFlowProvider} from \"react-flow-renderer\";\nimport LayoutFlow from \"./Layout-Flow\";\nimport {ItemConnection} from \"../../util/ItemConnection\";\nimport dagre from \"dagre\";\nimport React, {useState} from \"react\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\n\ninterface NodeRendererProps {\n  connections: ItemConnection[]\n  sources: string[]\n  targets: string[]\n  setOnFocusIdHandler: (handler: (id: string) => void) => void\n}\n\nconst dagreGraph = new dagre.graphlib.Graph();\ndagreGraph.setDefaultEdgeLabel(() => ({}));\n\nconst NodeRenderer: React.FC<NodeRendererProps> = ({connections, setOnFocusIdHandler, sources, targets}) => {\n  const [layoutedElements, setLayoutedElements] = useState<Elements>();\n\n  useDeepCompareEffect(() => {\n    const nodes: Node[] = Array.from(new Set([...sources, ...targets])).map(name => {\n        let type = 'default';\n        if (sources.includes(name) && !targets.includes(name)) {\n          type = 'input'\n        } else if (!sources.includes(name) && targets.includes(name)) {\n          type = 'output'\n        }\n\n        return {\n          id: name,\n          type,\n          data: {label: name},\n          position: {x: 0, y: 0},\n        }\n      }\n    )\n\n    const edges: Edge[] = connections.map(connection => {\n      if (!connection.target) {\n        return null\n      }\n      return {\n        id: `${connection.source}-${connection.target}`,\n        source: connection.source,\n        target: connection.target,\n        type: 'custom',\n        arrowHeadType: ArrowHeadType.ArrowClosed\n\n      }\n    }).filter(value => value !== null) as Edge[]\n\n    dagreGraph.setGraph({rankdir: 'LR'});\n\n    const elements = [...nodes, ...edges]\n\n    elements.forEach((el) => {\n      if (isNode(el)) {\n        dagreGraph.setNode(el.id, {width: 150, height: 50});\n      } else {\n        dagreGraph.setEdge(el.source, el.target);\n      }\n    });\n    dagre.layout(dagreGraph);\n\n    setLayoutedElements(elements.map((el) => {\n      if (isNode(el)) {\n        const nodeWithPosition = dagreGraph.node(el.id);\n        el.targetPosition = Position.Left;\n        el.sourcePosition = Position.Right;\n        // we need to pass a slighltiy different position in order to notify react flow about the change\n        // @TODO how can we change the position handling so that we dont need this hack?\n        el.position = {x: nodeWithPosition.x + Math.random() / 1000, y: nodeWithPosition.y};\n      }\n\n      return el;\n    }));\n  }, [connections, sources, targets])\n\n\n  return (\n    <ReactFlowProvider>\n      {layoutedElements &&\n      <LayoutFlow elements={layoutedElements} setOnFocusIdHandler={setOnFocusIdHandler}/>\n      }\n    </ReactFlowProvider>\n  )\n}\n\nexport default NodeRenderer","import {TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport React, {useState} from \"react\";\n\ninterface ZoomInputProps {\n  onSubmit: (id: string) => void\n  nodes: string[]\n}\n\nconst ZoomInput: React.FC<ZoomInputProps> = ({onSubmit, nodes}) => {\n  const [id, setId] = useState<string>()\n\n  return (\n    <>\n      <Autocomplete\n        onChange={\n          (e, value) => {\n            setId(value!!)\n          }\n        }\n        renderInput={(params) =>\n          <TextField\n            {...params}\n            label=\"Combo box\"\n            variant=\"outlined\"\n            value={id}/>\n        }\n        options={nodes}\n      />\n      <button onClick={() => onSubmit(id!!)} disabled={id === undefined}>Submit</button>\n    </>\n  )\n}\n\nexport default ZoomInput","import React from \"react\"\nimport {Dialog} from \"@material-ui/core\";\n\nexport interface SettingsDialogProps {\n    open: boolean\n    onClose: () => void\n}\n\nconst SettingsDialog: React.FC<SettingsDialogProps> = ({onClose, open}) => {\n\n  return (\n    <Dialog open={open} onClose={onClose} fullScreen={true}>\n\n    </Dialog>\n  )\n}\n\nexport default SettingsDialog","import React, {useState} from \"react\"\nimport {List, ListItem, ListItemText} from \"@material-ui/core\";\nimport SettingsDialog from \"./SettingsDialog\";\n\ninterface DrawerMenuProps {\n  onClose: () => void\n}\n\nconst DrawerMenu: React.FC<DrawerMenuProps> = ({onClose}) => {\n  const [settingOpen, setSettingsOpen] = useState<boolean>(false);\n\n\n  return (\n    <>\n      <SettingsDialog open={settingOpen} onClose={() => {\n        setSettingsOpen(false)\n        onClose()\n      }}/>\n      <List>\n        <ListItem onClick={() => setSettingsOpen(true)}>\n          <ListItemText>Settings</ListItemText>\n        </ListItem>\n      </List>\n    </>\n  )\n}\n\nexport default DrawerMenu","import EditIcon from '@material-ui/icons/Edit';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport React, {useState} from 'react';\nimport './App.css';\nimport {AppBar, Drawer, Fab, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport useStickyState from \"./util/stickyState\";\nimport {ItemConnection} from \"./util/ItemConnection\";\nimport EditConnectionsDialog from \"./component/EditConnectionDialog/EditConnectionsDialog\";\nimport NodeRenderer from \"./component/NodeRenderer/NodeRenderer\";\nimport ZoomInput from \"./component/ZoomInput\";\nimport data from 'minecraft-data'\nimport DrawerMenu from \"./component/DrawerMenu/DrawerMenu\";\n\nfunction App() {\n  const [connections, setConnections] = useStickyState<ItemConnection[]>([], \"itemconnection\")\n\n  const [drawerOpen, setDrawerOpen] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState<boolean>(false)\n  const [onFocusIdHandler, setOnFocusIdHandler] = useState<((id: string) => void)>(() => {\n  })\n\n  const handleNewConnection = (source: string, target: string) => {\n    const newConnections = connections.filter(value => !((value.source === source || value.target === source) && value.target === undefined))\n    newConnections.push({source, target})\n    setConnections(newConnections)\n  }\n\n  // const jsonString = JSON.stringify(connections);\n  // deflate(jsonString, (error, result) => {\n  //   if (error) {\n  //     console.error(error.message)\n  //     return;\n  //   }\n  //   console.log(`Uncompressed: ${Buffer.from(jsonString).toString(\"Base64\").length}`)\n  //   console.log(`Compressed: ${result.toString(\"Base64\").length}`);\n  // });\n\n  const ids = Object.values(data(\"1.17.1\").items).map(item => item.displayName)\n\n  const sources = connections.map(value => value.source);\n  const targets = connections.map(value => value.target).filter(value => value !== undefined) as string[];\n\n  let nodeNames = Array.from(new Set([...sources, ...targets]));\n\n  return (\n    <div className=\"App\">\n      <AppBar>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={() => setDrawerOpen(true)}\n            edge=\"start\"\n          >\n            <MenuIcon/>\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Minecraft Randomizer Map\n          </Typography>\n          <ZoomInput onSubmit={id => {\n            if (onFocusIdHandler) {\n              onFocusIdHandler(id)\n            }\n          }} nodes={nodeNames}/>\n        </Toolbar>\n      </AppBar>\n      <Drawer variant=\"temporary\" open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n        <DrawerMenu onClose={() => setDrawerOpen(false)}/>\n      </Drawer>\n      <NodeRenderer connections={connections} setOnFocusIdHandler={setOnFocusIdHandler} sources={sources}\n                    targets={targets}/>\n      <EditConnectionsDialog\n        onSubmit={handleNewConnection}\n        itemIds={ids.sort()}\n        onDelete={(itemsToDelete: ItemConnection[]) => {\n          setConnections(connections.filter(connection => !itemsToDelete.includes(connection)))\n        }}\n        onClose={() => {\n          setShowEditDialog(false)\n        }}\n        open={showEditDialog}\n        connections={connections}\n      />\n      <div>\n        <Fab color=\"primary\" onClick={() => setShowEditDialog(true)}>\n          <EditIcon/>\n        </Fab>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, {SetStateAction} from \"react\";\n\nexport default function useStickyState<T>(defaultValue: T, key: string): [T, React.Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = React.useState<T>(() => {\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null\n      ? JSON.parse(stickyValue)\n      : defaultValue;\n  });\n  React.useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}